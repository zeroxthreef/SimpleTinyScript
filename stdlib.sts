# this file is released into the public domain

# This is the STS standard library. It is written in STS
# instead of C to keep the source of the interpreter
# smaller than it would be if this were entirely C.

# The following implements hashmaps, string management,
# file parsing, and other uncategorized utility functions.


# stdlib globals ========================


global stdlib-current-error ""

# sts type globals (are functions to make constant)
function STS_EXTERNAL {copy 0}
function STS_NIL {copy 1}
function STS_NUMBER {copy 2}
function STS_STRING {copy 3}
function STS_ARRAY {copy 4}
function STS_FUNCTION {copy 5}


# hashmap implementation ================


function hashmap {
    local ret $nil

    if(% (sizeof $...) 2) {
        stdlib-set-error hashmap "arguments provided were not an even number"
    }
    else {
        print making hashmap
    }

    pass ret
}

function hashmap-get map key {

}

function hashmap-set map key value {

}

function hashmap-verify map {

}


# string management =====================


function string-tokenize string token {

}

function string-range string start end {

}

function string-search string needle {

}

function string-rsearch string needle {
    
}

function string-insert string position instring {

}

function string-remove string position {

}

function string-replace string replacement {

}


# uncategorized =========================

function stdlib-get-error {
    local ret "no error"

    if(== (typeof $stdlib-current-error) (STS_STRING)) {
        set $ret (copy $stdlib-current-error)
    }

    # clear the error
    set $stdlib-current-error $nil
    
    pass $ret
}

function stdlib-set-error component_str error_str {
    set $stdlib-current-error (string $component_str ": " $error_str)
}

# returns a string of a recursively indexed value. Useful for debugging data structures
function string-value-print value {
    local ret $nil
    local i 0


    if(== (typeof $value) (STS_NIL)) {
        if(!= (typeof $ret) (STS_STRING)) {set $ret (string $value)}
    }
    elseif(== (typeof $value) (STS_FUNCTION)) {
        if(!= (typeof $ret) (STS_STRING)) {set $ret (string $value)}
    }
    elseif(== (typeof $value) (STS_EXTERNAL)) {
        if(!= (typeof $ret) (STS_STRING)) {set $ret (string $value)}
    }
    elseif(== (typeof $value) (STS_ARRAY)) {
        if(!= (typeof $ret) (STS_STRING)) {set $ret "[array:"}
        
        loop(< $i (sizeof $value)) {
            set $ret (string $ret ", " [string-value-print (get $value $i)])
            ++ $i
        }

        set $ret (string $ret "]")
    }
    elseif(== (typeof $value) (STS_NUMBER)) {
        if(!= (typeof $ret) (STS_STRING)) {set $ret (string $value)}
    }
    elseif(== (typeof $value) (STS_STRING)) {
        if(!= (typeof $ret) (STS_STRING)) {set $ret (string $value)}
    }

    pass $ret
}